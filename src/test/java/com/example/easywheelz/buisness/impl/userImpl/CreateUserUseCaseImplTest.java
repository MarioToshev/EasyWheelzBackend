package com.example.easywheelz.buisness.impl.userImpl;

import com.example.easywheelz.buisness.RoleConverter;
import com.example.easywheelz.buisness.UserConverter;
import com.example.easywheelz.buisness.userInterf.CreateUserUseCase;
import com.example.easywheelz.domain.role.Role;
import com.example.easywheelz.domain.user.CreateUserRequest;
import com.example.easywheelz.domain.user.CreateUserResponse;
import com.example.easywheelz.domain.user.User;
import com.example.easywheelz.persistance.RoleRepository;
import com.example.easywheelz.persistance.UserRepository;
import com.example.easywheelz.persistance.entities.UserEntity;
import lombok.AllArgsConstructor;
import net.bytebuddy.asm.Advice;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
@SpringBootTest
@AllArgsConstructor
class CreateUserUseCaseImplTest {
    @Autowired
    private RoleRepository roleRepository;
    @Autowired
    private UserRepository userRepository;

    @Autowired

    private CreateUserUseCase userUseCase;
    @Autowired
    private RoleConverter roleConverter;
    @Autowired
    private UserConverter userConverter;

    @Test
    public void testCreateUser() {
        Role role = Role.builder()
                .roleName("TestRole")
                .build();
        roleRepository.save(roleConverter.convert(role));

        CreateUserRequest request = CreateUserRequest.builder()
                .firstName("John")
                .lastName("Doe")
                .email("johndoe@example.com")
                .phone(1234567890)
                .driverLicense(12321312)
                .role(role)
                .build();
       CreateUserResponse response = userUseCase.createUser(request);

       UserEntity user = userRepository.findById(response.getId());

        UserEntity userFromRequest = userConverter.convert(request);
        //Since the CreateUserRequest entity doesn't have an id, because it's generated by the backend
        // we are going to assign the id form the response returned
        userFromRequest.setId(response.getId());
        assertEquals(user,userFromRequest);
    }

    @Test
    public void testCreateUserWithNonexistentRole() {


        // create a test user request with a nonexistent role
        CreateUserRequest request = CreateUserRequest.builder()
                .firstName("John")
                .lastName("Doe")
                .email("johndoe@example.com")
                .phone(1234567890)
                .driverLicense(354435)
                .role(Role.builder().roleName("NonexistentRole").build())
                .build();

        Exception exception = assertThrows(RuntimeException.class, () -> {
            userUseCase.createUser(request);
        });
        assertEquals("Role doesn't exist", exception.getMessage());

    }
}